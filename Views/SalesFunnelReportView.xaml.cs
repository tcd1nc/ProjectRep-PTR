using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;


namespace PTR.Views
{
    /// <summary>
    /// Interaction logic for SalesFunnelReportView.xaml
    /// </summary>
    public partial class SalesFunnelReportView : Window
    {
        public SalesFunnelReportView()
        {
            InitializeComponent();
            this.DataContext = new ViewModels.SalesFunnelReportViewModel();
        }
                
        private void ReportGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            try
            {
                var f = new FrameworkElementFactory(typeof(TextBlock));
                Binding b = new Binding(e.Column.Header.ToString())
                {
                    Mode = BindingMode.OneTime
                };

                switch (e.PropertyName)
                {
                    case "Status":
                        f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Left);                        
                        f.SetValue(TextBlock.TextProperty, b);
                        e.Column = new DataGridTemplateColumn()
                        {
                            Header = "Status",
                            HeaderStyle = FindResource("ColumnHeaderStyle") as Style,
                           // CellTemplate = new DataTemplate() { VisualTree = f },

                            CellTemplate = FindResource("SPStatusTemplate") as DataTemplate
                        };
                        break;


                    case "StatusColour":
                        e.Cancel = true;
                        break;

                    default:
                        f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Right);
                        b.StringFormat = "${0:N0}";
                        f.SetValue(TextBlock.TextProperty, b);

                        e.Column = new DataGridTemplateColumn()
                        {
                            Width = 70,
                            // Header = (e.PropertyName.Contains("%"))? "%" : e.Column.Header,
                            Header = e.Column.Header,
                            HeaderStyle = FindResource("ColumnHeaderStyle") as Style,
                            CellTemplate = new DataTemplate() { VisualTree = f },
                        };
                        break;

                }
            }
            catch
            {

            }
        }

        //private void DataGrid_LoadingRow(object sender, DataGridRowEventArgs e)
        //{
        //    try
        //    {
        //        DataGridRow r = e.Row as DataGridRow;
        //        DataRowView c = r.Item as DataRowView;
        //        if (c != null)
        //        {
        //            //  if (c.Row.Field<int>(0) != null)
        //            r.Background = StaticCollections.ColorDictionary[c.Row.Field<int>(0).ToString()];

        //        }
        //    }
        //    catch
        //    {

        //    }
        //}

        //private void ProjectCountGrid_AutoGeneratedColumns(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        DataGrid dg = (sender as DataGrid);
        //        var c = dg.Columns[0];

        //        c.CellStyle = FindResource("StatusStyle") as Style;// StatusStyle;

        //        for (int i = 1; i < dg.Columns.Count; i++)
        //        {
        //            var c1 = dg.Columns[i];
        //            c1.CellStyle = FindResource("StatusStyle") as Style; // CurrencyStyle;
        //        }
        //    }
        //    catch
        //    {

        //    }
        //}

        private void ProjectCountGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            try
            {
                var f = new FrameworkElementFactory(typeof(TextBlock));
                Binding b = new Binding(e.Column.Header.ToString());
                b.Mode = BindingMode.OneTime;

                switch (e.PropertyName)
                {
                    case "Status":
                        f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Left);
                        f.SetValue(TextBlock.TextProperty, b);
                        e.Column = new DataGridTemplateColumn()
                        {
                            Header = "Status",
                           // Width = 60,
                            HeaderStyle = FindResource("ColumnHeaderStyle") as Style,
                            //CellTemplate = new DataTemplate() { VisualTree = f },
                            CellTemplate = FindResource("SPStatusTemplate") as DataTemplate
                        };
                        break;
                    case "StatusColour":
                        e.Cancel = true;
                        break;
                    default:

                        f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Center);
                        b.StringFormat = "N0";
                        f.SetValue(TextBlock.TextProperty, b);
                        e.Column = new DataGridTemplateColumn()
                        {
                            Width = 70,
                            Header = e.Column.Header,
                            HeaderStyle = FindResource("ColumnHeaderStyle") as Style,
                            CellTemplate = new DataTemplate() { VisualTree = f },
                        };
                        break;
                }
            }
            catch
            {

            }
        
        }

    }
}
