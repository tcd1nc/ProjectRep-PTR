using System.ComponentModel;
using System.Data;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace PTR.Views
{
    /// <summary>
    /// Interaction logic for PlaybookView2.xaml
    /// </summary>
    public partial class PlaybookView2 : Window
    {
        DataTable dt;
        public PlaybookView2()
        {
            InitializeComponent();
            this.DataContext = new ViewModels.PlaybookViewModel2();

            ((ViewModels.PlaybookViewModel2)DataContext).PropertyChanged += PlaybookView_PropertyChanged;
            dt = (DataContext as ViewModels.PlaybookViewModel2).SalesFunnel;
            //createstyle();
        }
        
        //Style st;
        //private void createstyle()
        //{
        //    var style = new Style(typeof(System.Windows.Controls.Primitives.DataGridColumnHeader));
        //    var alsetter = new Setter(HorizontalContentAlignmentProperty, HorizontalAlignment.Center);
        //    var padsetter = new Setter(PaddingProperty, new Thickness(4, 0, 4, 0));
        //    var fontsetter = new Setter(FontSizeProperty, new FontSizeConverter().ConvertFromString("12"));

        //    GradientStopCollection gsc = new GradientStopCollection() ;
        //    gsc.Add(new GradientStop() { Offset=0, Color= (Color) ColorConverter.ConvertFromString("#DEB40A") });
        //    gsc.Add(new GradientStop() { Offset = 1, Color = (Color)ColorConverter.ConvertFromString("#FF7F00") });

        //    LinearGradientBrush lb = new LinearGradientBrush();
        //    lb.StartPoint = new Point(0.5, 0);
        //    lb.EndPoint = new Point(0.5, 1);
        //    lb.GradientStops = gsc;

        //    var bgdsetter = new Setter(BackgroundProperty, lb);
                       
        //    style.Setters.Add(alsetter);
        //    style.Setters.Add(padsetter);
        //    style.Setters.Add(fontsetter);
        //    style.Setters.Add(bgdsetter);

        //    st = style;
        //}



        private void PlaybookView_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            dt = (DataContext as ViewModels.PlaybookViewModel2).SalesFunnel;

        }
       
        //private void ReportGrid_AutoGeneratedColumns(object sender, EventArgs e)
        //{
            //DataGrid dg = (sender as DataGrid);
            //var c = dg.Columns[0];
            //c.CellStyle = FindResource("StatusStyle") as Style;// StatusStyle;

            //var cs = FindResource("StatusStyle") as Style;
            //for (int i = 1; i < dg.Columns.Count; i++)
            //{
            //    var c1 = dg.Columns[i];
            //    c1.CellStyle = cs;// FindResource("StatusStyle") as Style; // CurrencyStyle;
            //}
        //}

        private void ReportGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            var f = new FrameworkElementFactory(typeof(TextBlock));
            Binding b = new Binding(e.Column.Header.ToString())
            {
                Mode = BindingMode.OneTime
            };

            switch (e.PropertyName)
            {
                case "SalesFunnelStage":
                    f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Center);
                    f.SetValue(TextBlock.TextProperty, b);
                    e.Column = new DataGridTemplateColumn()
                    {
                        Header = dt.Columns[e.PropertyName].Caption,                        
                        HeaderStyle = FindResource("ColumnHeaderStyle") as Style,
                        CellTemplate = FindResource("StatusTemplate") as DataTemplate
                       
                    };
                    break;
                case "Colour":
                    e.Cancel = true;
                    break;
                case "ProjectTypeColour":
                    e.Cancel = true;
                    break;
                default:
                    f.SetValue(TextBlock.PaddingProperty, new Thickness(4, 0, 4, 0));

                    if (dt.Columns[e.PropertyName].ExtendedProperties.ContainsKey("Format"))
                        b.StringFormat = dt.Columns[e.PropertyName].ExtendedProperties["Format"].ToString();

                    if (dt.Columns[e.PropertyName].ExtendedProperties["Alignment"].ToString() == "Left")
                        f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Left);
                    else
                        if (dt.Columns[e.PropertyName].ExtendedProperties["Alignment"].ToString() == "Right")
                        f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Right);
                    else
                        f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Center);

                    f.SetValue(TextBlock.TextProperty, b);

                    if (dt.Columns[e.PropertyName].ExtendedProperties.ContainsKey("FieldType") && (int)dt.Columns[e.PropertyName].ExtendedProperties["FieldType"] == 99)
                    {
                       
                        f.SetValue(TextBlock.ToolTipProperty, b); 
                        
                        e.Column = new DataGridTemplateColumn()
                        {
                            Header = dt.Columns[e.PropertyName].Caption,
                            Width = 100,
                            HeaderStyle = FindResource("ColumnHeaderStyle") as Style,
                            CellTemplate = new DataTemplate() { VisualTree = f },
                        };
                    }
                    else
                        e.Column = new DataGridTemplateColumn()
                        {
                            Header = dt.Columns[e.PropertyName].Caption,
                            HeaderStyle = FindResource("ColumnHeaderStyle") as Style,
                            CellTemplate = new DataTemplate() { VisualTree = f },
                        };

                    break;
            }
        }

        //private DataTemplate BuildCustomCellTemplate(string columnName)
        //{
        //    var template = new DataTemplate();

        //    var button = new FrameworkElementFactory(typeof(Button));
        //    template.VisualTree = button;

        //    var binding = new Binding();
        //    binding.Path = new PropertyPath(columnName);

        //    button.SetValue(ContentProperty, binding);

        //    return template;
        //}

        
        //private void DataGrid_LoadingRow(object sender, DataGridRowEventArgs e)
        //{
            //DataGridRow r = e.Row as DataGridRow;
            //DataRowView c = r.Item as DataRowView;
            //if (c != null)
            //{
            //    if (c.Row.Field<string>(0) != null)
            //        r.Background = StaticCollections.ColorDictionary[c.Row.Field<string>(0).ToString()];
            //}
        //}

        #region New Business

        private void NewBusinessGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            var f = new FrameworkElementFactory(typeof(TextBlock));
            Binding b = new Binding(e.Column.Header.ToString())
            {
                Mode = BindingMode.OneTime
            };
            DataTable dt = (DataContext as ViewModels.PlaybookViewModel2).NewBusiness;

            f.SetValue(TextBlock.PaddingProperty, new Thickness(4, 0, 4, 0));

            if (dt.Columns[e.PropertyName].ExtendedProperties.ContainsKey("Format"))
                b.StringFormat = dt.Columns[e.PropertyName].ExtendedProperties["Format"].ToString();

            if (dt.Columns[e.PropertyName].ExtendedProperties["Alignment"].ToString() == "Left")
                f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Left);
            else
                if (dt.Columns[e.PropertyName].ExtendedProperties["Alignment"].ToString() == "Right")
                f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Right);
            else
                f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Center);

            f.SetValue(TextBlock.TextProperty, b);

                e.Column = new DataGridTemplateColumn()
                {
                    Header = dt.Columns[e.PropertyName].Caption,
                    HeaderStyle = FindResource("ColumnHeaderStyle") as Style,
                    CellTemplate = new DataTemplate() { VisualTree = f },
                };

        }
        #endregion
    }
}
